name: GitHub Actions Demo
on: [push, workflow_dispatch]
jobs:
  #python:
  #   name: Build and Push Python Microservice
  #   runs-on: ubuntu-latest
  #   environment: docker
  #   steps:

  #       - name: Checkout 
  #         uses: actions/checkout@v3
  #       - 
  #         name: Build Python Project
  #         uses: pybuilder/build@master

  #       - name: Publish
  #         env:
  #           TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
  #           TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  #         run: |
  #           cd /home/runner/work/microcicd/microcicd/target/dist/wilo_cloud-3.0.0/dist/
  #           pip install setuptools wheel twine
  #           twine upload --repository testpypi *

  # docker:
      # name: Build and Push Docker Image
  #   # needs: build_artifact
  #   runs-on: ubuntu-latest
  #   environment: docker
  #   steps:
  #     -  
  #       name: Checkout
  #       uses: actions/checkout@v3
  #     -
  #       name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     -
  #       name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.USERNAME }}
  #         password: ${{ secrets.PASSWORD }}
  #     -
  #       name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: true
  #         tags: svathsan/flaskcicd:latest

  deploy:
    name: Login and Deploy to AWS EKS
    runs-on: ubuntu-latest
    environment: aws
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1

      - name: verify deployment
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: rollout status deployment/my-app

#    environment: openshift
#    steps:
#      - name: Authenticate and set context
#        uses: redhat-actions/oc-login@v1
#        env:
#          OPENSHIFT_USER: vathsan
#          OPENSHIFT_NAMESPACE: vathsan
#        with:
#          # URL to your OpenShift cluster.
#          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
#          # Authentication Token. Can use username and password instead.
#          openshift_token: ${{ secrets.OPENSHIFT_PASSWORD }}
#          # Disables SSL cert checking.
#          insecure_skip_tls_verify: true
#      - name: Deploy k8 configs
#        run: |
#          oc create -f deployment.yaml
#          oc create -f service.yaml
